"""
Bedrock Configuration Management
Reads configuration from AWS Systems Manager Parameter Store
"""

import boto3
import os
from typing import Optional

class BedrockConfig:
    """Configuration manager for Bedrock service"""
    
    def __init__(self, region: Optional[str] = None):
        """
        Initialize configuration from Parameter Store
        
        Args:
            region: AWS region (defaults to environment or us-east-1)
        """
        self.region = region or os.environ.get('AWS_REGION', 'us-east-1')
        self.ssm_client = boto3.client('ssm', region_name=self.region)
        
        # Load configuration from Parameter Store
        self.model_id = self._get_parameter('/llm-loss-register/bedrock-model-id')
        self.bedrock_region = self._get_parameter('/llm-loss-register/bedrock-region')
        self.max_tokens = int(self._get_parameter('/llm-loss-register/max-tokens'))
        self.anthropic_version = self._get_parameter('/llm-loss-register/anthropic-version')
        
        # Validate configuration
        self._validate_config()
    
    def _get_parameter(self, param_name: str) -> str:
        """
        Get parameter value from Parameter Store
        
        Args:
            param_name: Parameter name to retrieve
            
        Returns:
            Parameter value as string
            
        Raises:
            ValueError: If parameter cannot be retrieved
        """
        try:
            response = self.ssm_client.get_parameter(
                Name=param_name,
                WithDecryption=False
            )
            return response['Parameter']['Value']
        except Exception as e:
            raise ValueError(f"Failed to retrieve parameter {param_name}: {str(e)}")
    
    def _validate_config(self):
        """Validate configuration values"""
        if not self.model_id:
            raise ValueError("Model ID is required")
        if not self.bedrock_region:
            raise ValueError("Bedrock region is required")
        if self.max_tokens <= 0:
            raise ValueError("Max tokens must be positive")
        if not self.anthropic_version:
            raise ValueError("Anthropic version is required")
    
    def get_bedrock_endpoint(self) -> str:
        """Get Bedrock endpoint URL"""
        return f"https://bedrock-runtime.{self.bedrock_region}.amazonaws.com"
    
    def to_dict(self) -> dict:
        """Convert configuration to dictionary"""
        return {
            'model_id': self.model_id,
            'bedrock_region': self.bedrock_region,
            'max_tokens': self.max_tokens,
            'anthropic_version': self.anthropic_version,
            'region': self.region
        }
