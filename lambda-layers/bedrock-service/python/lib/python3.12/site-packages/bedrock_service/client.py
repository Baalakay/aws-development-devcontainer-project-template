"""
Bedrock Client for LLM Loss Register Analysis
Handles communication with AWS Bedrock service
"""

import boto3
import json
import time
from typing import Dict, Any, Optional
from .config import BedrockConfig
from .prompts import PromptUtils

class BedrockClient:
    """Client for AWS Bedrock service"""
    
    def __init__(self, config: BedrockConfig):
        """
        Initialize Bedrock client
        
        Args:
            config: Bedrock configuration object
        """
        self.config = config
        self.bedrock_client = boto3.client(
            'bedrock-runtime',
            region_name=config.bedrock_region
        )
    
    def invoke_model(self, prompt: Dict[str, Any]) -> Dict[str, Any]:
        """
        Invoke Bedrock model with prompt
        
        Args:
            prompt: Formatted prompt for the model
            
        Returns:
            Response from Bedrock
            
        Raises:
            Exception: If model invocation fails
        """
        try:
            # Validate prompt structure
            if not PromptUtils.validate_prompt_structure(prompt):
                raise ValueError("Invalid prompt structure")
            
            # Convert prompt to JSON string
            request_body = json.dumps(prompt)
            
            # Invoke model
            response = self.bedrock_client.invoke_model(
                modelId=self.config.model_id,
                body=request_body
            )
            
            return response
            
        except Exception as e:
            raise Exception(f"Failed to invoke Bedrock model: {str(e)}")
    
    def analyze_worksheet_vision(
        self, 
        worksheet_image: bytes, 
        worksheet_info: Dict[str, Any]
    ) -> str:
        """
        Analyze worksheet using vision capabilities
        
        Args:
            worksheet_image: Image data of the worksheet
            worksheet_info: Basic worksheet information
            
        Returns:
            Analysis result as text
        """
        # Create vision prompt for worksheet analysis
        base_text = self._create_worksheet_analysis_prompt(worksheet_info)
        
        # Create vision prompt
        prompt = PromptUtils.create_vision_prompt(
            base_text=base_text,
            image_data=worksheet_image,
            max_tokens=self.config.max_tokens,
            anthropic_version=self.config.anthropic_version
        )
        
        # Invoke model
        response = self.invoke_model(prompt)
        
        # Extract response text
        return PromptUtils.extract_response_text(response)
    
    def validate_canonical_mapping(
        self, 
        customer_schema: Dict[str, Any], 
        canonical_mapping: Dict[str, Any],
        previous_mapping: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Validate canonical schema mapping using LLM
        
        Args:
            customer_schema: Customer's current schema
            canonical_mapping: Proposed canonical mapping
            previous_mapping: Previous mapping if exists
            
        Returns:
            Validation result as text
        """
        # Create validation prompt
        base_text = self._create_mapping_validation_prompt(
            customer_schema, canonical_mapping, previous_mapping
        )
        
        # Create text prompt
        prompt = PromptUtils.create_text_prompt(
            base_text=base_text,
            max_tokens=self.config.max_tokens,
            anthropic_version=self.config.anthropic_version
        )
        
        # Invoke model
        response = self.invoke_model(prompt)
        
        # Extract response text
        return PromptUtils.extract_response_text(response)
    
    def _create_worksheet_analysis_prompt(self, worksheet_info: Dict[str, Any]) -> str:
        """
        Create prompt for worksheet analysis
        
        Args:
            worksheet_info: Basic worksheet information
            
        Returns:
            Formatted prompt text
        """
        return f"""
        Analyze this Excel worksheet to determine its structure and business purpose.
        
        Worksheet Information:
        - Name: {worksheet_info.get('name', 'Unknown')}
        - Type: {worksheet_info.get('type', 'Unknown')}
        - File Path: {worksheet_info.get('file_path', 'Unknown')}
        
        Please analyze this worksheet and provide:
        
        1. **Column Analysis**: Identify all column names and their business meaning
        2. **Data Structure**: Determine if this is transactional data, summary data, or reference data
        3. **Business Context**: Identify the business domain (insurance, claims, financial, etc.)
        4. **Data Quality**: Note any obvious data quality issues (missing values, inconsistent formats)
        5. **Schema Recommendations**: Suggest how this data should be structured for analysis
        
        Return your analysis in structured JSON format with these fields:
        {{
            "worksheet_name": "string",
            "business_domain": "string",
            "data_type": "transactional|summary|reference",
            "columns": [
                {{
                    "name": "string",
                    "business_meaning": "string",
                    "data_type": "string",
                    "sample_values": ["string"],
                    "quality_notes": "string"
                }}
            ],
            "data_quality_issues": ["string"],
            "schema_recommendations": ["string"],
            "confidence_score": 0.95
        }}
        
        Focus on extracting all values as text to preserve data integrity and format.
        """
    
    def _create_mapping_validation_prompt(
        self, 
        customer_schema: Dict[str, Any], 
        canonical_mapping: Dict[str, Any],
        previous_mapping: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Create prompt for mapping validation
        
        Args:
            customer_schema: Customer's current schema
            canonical_mapping: Proposed canonical mapping
            previous_mapping: Previous mapping if exists
            
        Returns:
            Formatted prompt text
        """
        previous_text = ""
        if previous_mapping:
            previous_text = f"""
            Previous Mapping:
            {json.dumps(previous_mapping, indent=2)}
            """
        
        return f"""
        Validate this proposed canonical schema mapping for a loss register system.
        
        Customer Schema:
        {json.dumps(customer_schema, indent=2)}
        
        Proposed Canonical Mapping:
        {json.dumps(canonical_mapping, indent=2)}
        
        {previous_text}
        
        Please validate this mapping and provide:
        
        1. **Mapping Accuracy**: Are the column mappings logical and correct?
        2. **Data Loss Risk**: Will any important data be lost in this mapping?
        3. **Business Logic**: Does this mapping align with loss register business requirements?
        4. **Change Impact**: If this is a change from previous mapping, what are the implications?
        5. **Recommendations**: Any suggestions for improving the mapping?
        
        Return your validation in structured JSON format:
        {{
            "is_valid": true,
            "confidence_score": 0.95,
            "mapping_accuracy": "high|medium|low",
            "data_loss_risk": "none|low|medium|high",
            "business_logic_alignment": "excellent|good|fair|poor",
            "change_impact": "none|low|medium|high",
            "issues_found": ["string"],
            "recommendations": ["string"],
            "validation_notes": "string"
        }}
        """
