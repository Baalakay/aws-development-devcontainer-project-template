"""
Prompt Utilities for Bedrock Service
Provides utilities for creating properly formatted prompts
"""

import base64
from typing import Dict, Any, Optional

class PromptUtils:
    """Utilities for creating and managing Bedrock prompts"""
    
    @staticmethod
    def create_vision_prompt(
        base_text: str, 
        image_data: bytes, 
        max_tokens: int,
        anthropic_version: str
    ) -> Dict[str, Any]:
        """
        Create properly formatted vision prompt for Bedrock
        
        Args:
            base_text: Text prompt to send with image
            image_data: Image data as bytes
            max_tokens: Maximum tokens for response
            anthropic_version: Anthropic API version
            
        Returns:
            Formatted prompt dictionary for Bedrock
        """
        # Convert image to base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        return {
            "anthropic_version": anthropic_version,
            "max_tokens": max_tokens,
            "messages": [{
                "role": "user",
                "content": [
                    {"type": "text", "text": base_text},
                    {"type": "image", "source": {"type": "base64", "data": image_base64}}
                ]
            }]
        }
    
    @staticmethod
    def create_text_prompt(
        base_text: str,
        max_tokens: int,
        anthropic_version: str
    ) -> Dict[str, Any]:
        """
        Create text-only prompt for Bedrock
        
        Args:
            base_text: Text prompt to send
            max_tokens: Maximum tokens for response
            anthropic_version: Anthropic API version
            
        Returns:
            Formatted prompt dictionary for Bedrock
        """
        return {
            "anthropic_version": anthropic_version,
            "max_tokens": max_tokens,
            "messages": [{
                "role": "user",
                "content": [{"type": "text", "text": base_text}]
            }]
        }
    
    @staticmethod
    def validate_prompt_structure(prompt: Dict[str, Any]) -> bool:
        """
        Validate prompt structure
        
        Args:
            prompt: Prompt dictionary to validate
            
        Returns:
            True if valid, False otherwise
        """
        required_keys = ['anthropic_version', 'max_tokens', 'messages']
        
        # Check required keys exist
        for key in required_keys:
            if key not in prompt:
                return False
        
        # Check messages structure
        if not isinstance(prompt['messages'], list) or len(prompt['messages']) == 0:
            return False
        
        # Check first message has required content
        first_message = prompt['messages'][0]
        if 'role' not in first_message or 'content' not in first_message:
            return False
        
        return True
    
    @staticmethod
    def extract_response_text(response: Dict[str, Any]) -> str:
        """
        Extract text from Bedrock response
        
        Args:
            response: Response from Bedrock
            
        Returns:
            Extracted text content
        """
        try:
            # Parse response body
            if 'body' in response:
                import json
                body = json.loads(response['body'].read())
                
                # Extract content from Claude response
                if 'content' in body and len(body['content']) > 0:
                    return body['content'][0]['text']
            
            return "No response text found"
        except Exception as e:
            return f"Error extracting response: {str(e)}"
